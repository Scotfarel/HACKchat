// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hackmessage.proto

#include "hackmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace hackchat {
class TextMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TextMsg>
      _instance;
} _TextMsg_default_instance_;
class StatusMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatusMsg>
      _instance;
} _StatusMsg_default_instance_;
class PackageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Package>
      _instance;
  const ::hackchat::TextMsg* text_;
  const ::hackchat::StatusMsg* status_;
} _Package_default_instance_;
}  // namespace hackchat
namespace protobuf_hackmessage_2eproto {
void InitDefaultsTextMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::hackchat::_TextMsg_default_instance_;
    new (ptr) ::hackchat::TextMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hackchat::TextMsg::InitAsDefaultInstance();
}

void InitDefaultsTextMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTextMsgImpl);
}

void InitDefaultsStatusMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::hackchat::_StatusMsg_default_instance_;
    new (ptr) ::hackchat::StatusMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hackchat::StatusMsg::InitAsDefaultInstance();
}

void InitDefaultsStatusMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStatusMsgImpl);
}

void InitDefaultsPackageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hackmessage_2eproto::InitDefaultsTextMsg();
  protobuf_hackmessage_2eproto::InitDefaultsStatusMsg();
  {
    void* ptr = &::hackchat::_Package_default_instance_;
    new (ptr) ::hackchat::Package();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hackchat::Package::InitAsDefaultInstance();
}

void InitDefaultsPackage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPackageImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::TextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::TextMsg, msg_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::TextMsg, is_feature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::StatusMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::StatusMsg, connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::StatusMsg, connected_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, host_id_),
  offsetof(::hackchat::PackageDefaultTypeInternal, text_),
  offsetof(::hackchat::PackageDefaultTypeInternal, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hackchat::TextMsg)},
  { 7, -1, sizeof(::hackchat::StatusMsg)},
  { 14, -1, sizeof(::hackchat::Package)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hackchat::_TextMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hackchat::_StatusMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hackchat::_Package_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hackmessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021hackmessage.proto\022\010hackchat\"/\n\007TextMsg"
      "\022\020\n\010msg_text\030\003 \001(\t\022\022\n\nis_feature\030\004 \001(\010\"4"
      "\n\tStatusMsg\022\021\n\tconnected\030\003 \001(\010\022\024\n\014connec"
      "ted_id\030\004 \001(\005\"~\n\007Package\022\021\n\tsender_id\030\001 \001"
      "(\005\022\017\n\007host_id\030\002 \001(\005\022!\n\004text\030\003 \001(\0132\021.hack"
      "chat.TextMsgH\000\022%\n\006status\030\004 \001(\0132\023.hackcha"
      "t.StatusMsgH\000B\005\n\003msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hackmessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_hackmessage_2eproto
namespace hackchat {

// ===================================================================

void TextMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextMsg::kMsgTextFieldNumber;
const int TextMsg::kIsFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextMsg::TextMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hackmessage_2eproto::InitDefaultsTextMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hackchat.TextMsg)
}
TextMsg::TextMsg(const TextMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_text().size() > 0) {
    msg_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_text_);
  }
  is_feature_ = from.is_feature_;
  // @@protoc_insertion_point(copy_constructor:hackchat.TextMsg)
}

void TextMsg::SharedCtor() {
  msg_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_feature_ = false;
  _cached_size_ = 0;
}

TextMsg::~TextMsg() {
  // @@protoc_insertion_point(destructor:hackchat.TextMsg)
  SharedDtor();
}

void TextMsg::SharedDtor() {
  msg_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextMsg::descriptor() {
  ::protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextMsg& TextMsg::default_instance() {
  ::protobuf_hackmessage_2eproto::InitDefaultsTextMsg();
  return *internal_default_instance();
}

TextMsg* TextMsg::New(::google::protobuf::Arena* arena) const {
  TextMsg* n = new TextMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hackchat.TextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_feature_ = false;
  _internal_metadata_.Clear();
}

bool TextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hackchat.TextMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg_text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_text().data(), static_cast<int>(this->msg_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hackchat.TextMsg.msg_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_feature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_feature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hackchat.TextMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hackchat.TextMsg)
  return false;
#undef DO_
}

void TextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hackchat.TextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_text = 3;
  if (this->msg_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_text().data(), static_cast<int>(this->msg_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hackchat.TextMsg.msg_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg_text(), output);
  }

  // bool is_feature = 4;
  if (this->is_feature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_feature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hackchat.TextMsg)
}

::google::protobuf::uint8* TextMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hackchat.TextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_text = 3;
  if (this->msg_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_text().data(), static_cast<int>(this->msg_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hackchat.TextMsg.msg_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_text(), target);
  }

  // bool is_feature = 4;
  if (this->is_feature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_feature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hackchat.TextMsg)
  return target;
}

size_t TextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hackchat.TextMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg_text = 3;
  if (this->msg_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_text());
  }

  // bool is_feature = 4;
  if (this->is_feature() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hackchat.TextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TextMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hackchat.TextMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hackchat.TextMsg)
    MergeFrom(*source);
  }
}

void TextMsg::MergeFrom(const TextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hackchat.TextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_text().size() > 0) {

    msg_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_text_);
  }
  if (from.is_feature() != 0) {
    set_is_feature(from.is_feature());
  }
}

void TextMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hackchat.TextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMsg::CopyFrom(const TextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hackchat.TextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMsg::IsInitialized() const {
  return true;
}

void TextMsg::Swap(TextMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextMsg::InternalSwap(TextMsg* other) {
  using std::swap;
  msg_text_.Swap(&other->msg_text_);
  swap(is_feature_, other->is_feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextMsg::GetMetadata() const {
  protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatusMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusMsg::kConnectedFieldNumber;
const int StatusMsg::kConnectedIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusMsg::StatusMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hackmessage_2eproto::InitDefaultsStatusMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hackchat.StatusMsg)
}
StatusMsg::StatusMsg(const StatusMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connected_, &from.connected_,
    static_cast<size_t>(reinterpret_cast<char*>(&connected_id_) -
    reinterpret_cast<char*>(&connected_)) + sizeof(connected_id_));
  // @@protoc_insertion_point(copy_constructor:hackchat.StatusMsg)
}

void StatusMsg::SharedCtor() {
  ::memset(&connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connected_id_) -
      reinterpret_cast<char*>(&connected_)) + sizeof(connected_id_));
  _cached_size_ = 0;
}

StatusMsg::~StatusMsg() {
  // @@protoc_insertion_point(destructor:hackchat.StatusMsg)
  SharedDtor();
}

void StatusMsg::SharedDtor() {
}

void StatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusMsg::descriptor() {
  ::protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusMsg& StatusMsg::default_instance() {
  ::protobuf_hackmessage_2eproto::InitDefaultsStatusMsg();
  return *internal_default_instance();
}

StatusMsg* StatusMsg::New(::google::protobuf::Arena* arena) const {
  StatusMsg* n = new StatusMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hackchat.StatusMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connected_id_) -
      reinterpret_cast<char*>(&connected_)) + sizeof(connected_id_));
  _internal_metadata_.Clear();
}

bool StatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hackchat.StatusMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool connected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 connected_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connected_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hackchat.StatusMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hackchat.StatusMsg)
  return false;
#undef DO_
}

void StatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hackchat.StatusMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connected = 3;
  if (this->connected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connected(), output);
  }

  // int32 connected_id = 4;
  if (this->connected_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->connected_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hackchat.StatusMsg)
}

::google::protobuf::uint8* StatusMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hackchat.StatusMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connected = 3;
  if (this->connected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connected(), target);
  }

  // int32 connected_id = 4;
  if (this->connected_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->connected_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hackchat.StatusMsg)
  return target;
}

size_t StatusMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hackchat.StatusMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool connected = 3;
  if (this->connected() != 0) {
    total_size += 1 + 1;
  }

  // int32 connected_id = 4;
  if (this->connected_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->connected_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hackchat.StatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hackchat.StatusMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hackchat.StatusMsg)
    MergeFrom(*source);
  }
}

void StatusMsg::MergeFrom(const StatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hackchat.StatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connected() != 0) {
    set_connected(from.connected());
  }
  if (from.connected_id() != 0) {
    set_connected_id(from.connected_id());
  }
}

void StatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hackchat.StatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusMsg::CopyFrom(const StatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hackchat.StatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMsg::IsInitialized() const {
  return true;
}

void StatusMsg::Swap(StatusMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusMsg::InternalSwap(StatusMsg* other) {
  using std::swap;
  swap(connected_, other->connected_);
  swap(connected_id_, other->connected_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusMsg::GetMetadata() const {
  protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Package::InitAsDefaultInstance() {
  ::hackchat::_Package_default_instance_.text_ = const_cast< ::hackchat::TextMsg*>(
      ::hackchat::TextMsg::internal_default_instance());
  ::hackchat::_Package_default_instance_.status_ = const_cast< ::hackchat::StatusMsg*>(
      ::hackchat::StatusMsg::internal_default_instance());
}
void Package::set_allocated_text(::hackchat::TextMsg* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    msg_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:hackchat.Package.text)
}
void Package::set_allocated_status(::hackchat::StatusMsg* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    msg_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:hackchat.Package.status)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Package::kSenderIdFieldNumber;
const int Package::kHostIdFieldNumber;
const int Package::kTextFieldNumber;
const int Package::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Package::Package()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hackmessage_2eproto::InitDefaultsPackage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hackchat.Package)
}
Package::Package(const Package& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(host_id_));
  clear_has_msg();
  switch (from.msg_case()) {
    case kText: {
      mutable_text()->::hackchat::TextMsg::MergeFrom(from.text());
      break;
    }
    case kStatus: {
      mutable_status()->::hackchat::StatusMsg::MergeFrom(from.status());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:hackchat.Package)
}

void Package::SharedCtor() {
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(host_id_));
  clear_has_msg();
  _cached_size_ = 0;
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:hackchat.Package)
  SharedDtor();
}

void Package::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void Package::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Package::descriptor() {
  ::protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Package& Package::default_instance() {
  ::protobuf_hackmessage_2eproto::InitDefaultsPackage();
  return *internal_default_instance();
}

Package* Package::New(::google::protobuf::Arena* arena) const {
  Package* n = new Package;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Package::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:hackchat.Package)
  switch (msg_case()) {
    case kText: {
      delete msg_.text_;
      break;
    }
    case kStatus: {
      delete msg_.status_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:hackchat.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(host_id_));
  clear_msg();
  _internal_metadata_.Clear();
}

bool Package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hackchat.Package)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sender_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 host_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .hackchat.TextMsg text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .hackchat.StatusMsg status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hackchat.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hackchat.Package)
  return false;
#undef DO_
}

void Package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hackchat.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_id(), output);
  }

  // int32 host_id = 2;
  if (this->host_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->host_id(), output);
  }

  // .hackchat.TextMsg text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.text_, output);
  }

  // .hackchat.StatusMsg status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_.status_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hackchat.Package)
}

::google::protobuf::uint8* Package::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hackchat.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_id(), target);
  }

  // int32 host_id = 2;
  if (this->host_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->host_id(), target);
  }

  // .hackchat.TextMsg text = 3;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *msg_.text_, deterministic, target);
  }

  // .hackchat.StatusMsg status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *msg_.status_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hackchat.Package)
  return target;
}

size_t Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hackchat.Package)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_id());
  }

  // int32 host_id = 2;
  if (this->host_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->host_id());
  }

  switch (msg_case()) {
    // .hackchat.TextMsg text = 3;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.text_);
      break;
    }
    // .hackchat.StatusMsg status = 4;
    case kStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.status_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Package::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hackchat.Package)
  GOOGLE_DCHECK_NE(&from, this);
  const Package* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Package>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hackchat.Package)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hackchat.Package)
    MergeFrom(*source);
  }
}

void Package::MergeFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hackchat.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender_id() != 0) {
    set_sender_id(from.sender_id());
  }
  if (from.host_id() != 0) {
    set_host_id(from.host_id());
  }
  switch (from.msg_case()) {
    case kText: {
      mutable_text()->::hackchat::TextMsg::MergeFrom(from.text());
      break;
    }
    case kStatus: {
      mutable_status()->::hackchat::StatusMsg::MergeFrom(from.status());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void Package::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hackchat.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hackchat.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  return true;
}

void Package::Swap(Package* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Package::InternalSwap(Package* other) {
  using std::swap;
  swap(sender_id_, other->sender_id_);
  swap(host_id_, other->host_id_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Package::GetMetadata() const {
  protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hackchat

// @@protoc_insertion_point(global_scope)
