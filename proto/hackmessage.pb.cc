// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hackmessage.proto

#include "hackmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace hackchat {
class TextMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TextMsg>
      _instance;
} _TextMsg_default_instance_;
class StatusMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatusMsg>
      _instance;
} _StatusMsg_default_instance_;
class PackageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Package>
      _instance;
  const ::hackchat::TextMsg* text_msg_;
  const ::hackchat::StatusMsg* status_msg_;
} _Package_default_instance_;
class PackageListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PackageList>
      _instance;
} _PackageList_default_instance_;
}  // namespace hackchat
namespace protobuf_hackmessage_2eproto {
void InitDefaultsTextMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::hackchat::_TextMsg_default_instance_;
    new (ptr) ::hackchat::TextMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hackchat::TextMsg::InitAsDefaultInstance();
}

void InitDefaultsTextMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTextMsgImpl);
}

void InitDefaultsStatusMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::hackchat::_StatusMsg_default_instance_;
    new (ptr) ::hackchat::StatusMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hackchat::StatusMsg::InitAsDefaultInstance();
}

void InitDefaultsStatusMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStatusMsgImpl);
}

void InitDefaultsPackageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hackmessage_2eproto::InitDefaultsTextMsg();
  protobuf_hackmessage_2eproto::InitDefaultsStatusMsg();
  {
    void* ptr = &::hackchat::_Package_default_instance_;
    new (ptr) ::hackchat::Package();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hackchat::Package::InitAsDefaultInstance();
}

void InitDefaultsPackage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPackageImpl);
}

void InitDefaultsPackageListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hackmessage_2eproto::InitDefaultsPackage();
  {
    void* ptr = &::hackchat::_PackageList_default_instance_;
    new (ptr) ::hackchat::PackageList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hackchat::PackageList::InitAsDefaultInstance();
}

void InitDefaultsPackageList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPackageListImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::TextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::TextMsg, msg_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::TextMsg, is_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::TextMsg, date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::StatusMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::StatusMsg, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::StatusMsg, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::StatusMsg, user_login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::StatusMsg, user_pass_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, host_id_),
  offsetof(::hackchat::PackageDefaultTypeInternal, text_msg_),
  offsetof(::hackchat::PackageDefaultTypeInternal, status_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::Package, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::PackageList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hackchat::PackageList, pack_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hackchat::TextMsg)},
  { 8, -1, sizeof(::hackchat::StatusMsg)},
  { 17, -1, sizeof(::hackchat::Package)},
  { 27, -1, sizeof(::hackchat::PackageList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hackchat::_TextMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hackchat::_StatusMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hackchat::_Package_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hackchat::_PackageList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hackmessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021hackmessage.proto\022\010hackchat\032\037google/pr"
      "otobuf/timestamp.proto\"Y\n\007TextMsg\022\020\n\010msg"
      "_text\030\001 \001(\t\022\022\n\nis_feature\030\002 \001(\010\022(\n\004date\030"
      "\003 \001(\0132\032.google.protobuf.Timestamp\"\204\002\n\tSt"
      "atusMsg\022*\n\006status\030\001 \001(\0162\032.hackchat.Statu"
      "sMsg.Status\022\017\n\007user_id\030\002 \001(\005\022\022\n\nuser_log"
      "in\030\003 \001(\t\022\021\n\tuser_pass\030\004 \001(\014\"\222\001\n\006Status\022\020"
      "\n\014AUTH_SUCCESS\020\000\022\022\n\016AUTH_UNSUCCESS\020\001\022\017\n\013"
      "LOGIN_FOUND\020\002\022\r\n\tCONNECTED\020\003\022\020\n\014DISCONNE"
      "CTED\020\004\022\014\n\010NEW_USER\020\005\022\n\n\006SEARCH\020\006\022\007\n\003ADD\020"
      "\007\022\r\n\tNOT_FOUND\020\010\"\206\001\n\007Package\022\021\n\tsender_i"
      "d\030\001 \001(\005\022\017\n\007host_id\030\002 \001(\005\022%\n\010text_msg\030\003 \001"
      "(\0132\021.hackchat.TextMsgH\000\022)\n\nstatus_msg\030\004 "
      "\001(\0132\023.hackchat.StatusMsgH\000B\005\n\003msg\".\n\013Pac"
      "kageList\022\037\n\004pack\030\001 \003(\0132\021.hackchat.Packag"
      "eb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hackmessage.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_hackmessage_2eproto
namespace hackchat {
const ::google::protobuf::EnumDescriptor* StatusMsg_Status_descriptor() {
  protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hackmessage_2eproto::file_level_enum_descriptors[0];
}
bool StatusMsg_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StatusMsg_Status StatusMsg::AUTH_SUCCESS;
const StatusMsg_Status StatusMsg::AUTH_UNSUCCESS;
const StatusMsg_Status StatusMsg::LOGIN_FOUND;
const StatusMsg_Status StatusMsg::CONNECTED;
const StatusMsg_Status StatusMsg::DISCONNECTED;
const StatusMsg_Status StatusMsg::NEW_USER;
const StatusMsg_Status StatusMsg::SEARCH;
const StatusMsg_Status StatusMsg::ADD;
const StatusMsg_Status StatusMsg::NOT_FOUND;
const StatusMsg_Status StatusMsg::Status_MIN;
const StatusMsg_Status StatusMsg::Status_MAX;
const int StatusMsg::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TextMsg::InitAsDefaultInstance() {
  ::hackchat::_TextMsg_default_instance_._instance.get_mutable()->date_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void TextMsg::clear_date() {
  if (GetArenaNoVirtual() == NULL && date_ != NULL) {
    delete date_;
  }
  date_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextMsg::kMsgTextFieldNumber;
const int TextMsg::kIsFeatureFieldNumber;
const int TextMsg::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextMsg::TextMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hackmessage_2eproto::InitDefaultsTextMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hackchat.TextMsg)
}
TextMsg::TextMsg(const TextMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_text().size() > 0) {
    msg_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_text_);
  }
  if (from.has_date()) {
    date_ = new ::google::protobuf::Timestamp(*from.date_);
  } else {
    date_ = NULL;
  }
  is_feature_ = from.is_feature_;
  // @@protoc_insertion_point(copy_constructor:hackchat.TextMsg)
}

void TextMsg::SharedCtor() {
  msg_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_feature_) -
      reinterpret_cast<char*>(&date_)) + sizeof(is_feature_));
  _cached_size_ = 0;
}

TextMsg::~TextMsg() {
  // @@protoc_insertion_point(destructor:hackchat.TextMsg)
  SharedDtor();
}

void TextMsg::SharedDtor() {
  msg_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_;
}

void TextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextMsg::descriptor() {
  ::protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextMsg& TextMsg::default_instance() {
  ::protobuf_hackmessage_2eproto::InitDefaultsTextMsg();
  return *internal_default_instance();
}

TextMsg* TextMsg::New(::google::protobuf::Arena* arena) const {
  TextMsg* n = new TextMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hackchat.TextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && date_ != NULL) {
    delete date_;
  }
  date_ = NULL;
  is_feature_ = false;
  _internal_metadata_.Clear();
}

bool TextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hackchat.TextMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_text().data(), static_cast<int>(this->msg_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hackchat.TextMsg.msg_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_feature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hackchat.TextMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hackchat.TextMsg)
  return false;
#undef DO_
}

void TextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hackchat.TextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_text = 1;
  if (this->msg_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_text().data(), static_cast<int>(this->msg_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hackchat.TextMsg.msg_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg_text(), output);
  }

  // bool is_feature = 2;
  if (this->is_feature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_feature(), output);
  }

  // .google.protobuf.Timestamp date = 3;
  if (this->has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->date_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hackchat.TextMsg)
}

::google::protobuf::uint8* TextMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hackchat.TextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_text = 1;
  if (this->msg_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_text().data(), static_cast<int>(this->msg_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hackchat.TextMsg.msg_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_text(), target);
  }

  // bool is_feature = 2;
  if (this->is_feature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_feature(), target);
  }

  // .google.protobuf.Timestamp date = 3;
  if (this->has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->date_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hackchat.TextMsg)
  return target;
}

size_t TextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hackchat.TextMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg_text = 1;
  if (this->msg_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_text());
  }

  // .google.protobuf.Timestamp date = 3;
  if (this->has_date()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->date_);
  }

  // bool is_feature = 2;
  if (this->is_feature() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hackchat.TextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TextMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hackchat.TextMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hackchat.TextMsg)
    MergeFrom(*source);
  }
}

void TextMsg::MergeFrom(const TextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hackchat.TextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_text().size() > 0) {

    msg_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_text_);
  }
  if (from.has_date()) {
    mutable_date()->::google::protobuf::Timestamp::MergeFrom(from.date());
  }
  if (from.is_feature() != 0) {
    set_is_feature(from.is_feature());
  }
}

void TextMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hackchat.TextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMsg::CopyFrom(const TextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hackchat.TextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMsg::IsInitialized() const {
  return true;
}

void TextMsg::Swap(TextMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextMsg::InternalSwap(TextMsg* other) {
  using std::swap;
  msg_text_.Swap(&other->msg_text_);
  swap(date_, other->date_);
  swap(is_feature_, other->is_feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextMsg::GetMetadata() const {
  protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatusMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusMsg::kStatusFieldNumber;
const int StatusMsg::kUserIdFieldNumber;
const int StatusMsg::kUserLoginFieldNumber;
const int StatusMsg::kUserPassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusMsg::StatusMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hackmessage_2eproto::InitDefaultsStatusMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hackchat.StatusMsg)
}
StatusMsg::StatusMsg(const StatusMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_login().size() > 0) {
    user_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_login_);
  }
  user_pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_pass().size() > 0) {
    user_pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_pass_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:hackchat.StatusMsg)
}

void StatusMsg::SharedCtor() {
  user_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(user_id_));
  _cached_size_ = 0;
}

StatusMsg::~StatusMsg() {
  // @@protoc_insertion_point(destructor:hackchat.StatusMsg)
  SharedDtor();
}

void StatusMsg::SharedDtor() {
  user_login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusMsg::descriptor() {
  ::protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusMsg& StatusMsg::default_instance() {
  ::protobuf_hackmessage_2eproto::InitDefaultsStatusMsg();
  return *internal_default_instance();
}

StatusMsg* StatusMsg::New(::google::protobuf::Arena* arena) const {
  StatusMsg* n = new StatusMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hackchat.StatusMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

bool StatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hackchat.StatusMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .hackchat.StatusMsg.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::hackchat::StatusMsg_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_login = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_login().data(), static_cast<int>(this->user_login().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hackchat.StatusMsg.user_login"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes user_pass = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_pass()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hackchat.StatusMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hackchat.StatusMsg)
  return false;
#undef DO_
}

void StatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hackchat.StatusMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hackchat.StatusMsg.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // string user_login = 3;
  if (this->user_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_login().data(), static_cast<int>(this->user_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hackchat.StatusMsg.user_login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_login(), output);
  }

  // bytes user_pass = 4;
  if (this->user_pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->user_pass(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hackchat.StatusMsg)
}

::google::protobuf::uint8* StatusMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hackchat.StatusMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hackchat.StatusMsg.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // string user_login = 3;
  if (this->user_login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_login().data(), static_cast<int>(this->user_login().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hackchat.StatusMsg.user_login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_login(), target);
  }

  // bytes user_pass = 4;
  if (this->user_pass().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->user_pass(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hackchat.StatusMsg)
  return target;
}

size_t StatusMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hackchat.StatusMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_login = 3;
  if (this->user_login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_login());
  }

  // bytes user_pass = 4;
  if (this->user_pass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_pass());
  }

  // .hackchat.StatusMsg.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hackchat.StatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hackchat.StatusMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hackchat.StatusMsg)
    MergeFrom(*source);
  }
}

void StatusMsg::MergeFrom(const StatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hackchat.StatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_login().size() > 0) {

    user_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_login_);
  }
  if (from.user_pass().size() > 0) {

    user_pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_pass_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void StatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hackchat.StatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusMsg::CopyFrom(const StatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hackchat.StatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMsg::IsInitialized() const {
  return true;
}

void StatusMsg::Swap(StatusMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusMsg::InternalSwap(StatusMsg* other) {
  using std::swap;
  user_login_.Swap(&other->user_login_);
  user_pass_.Swap(&other->user_pass_);
  swap(status_, other->status_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusMsg::GetMetadata() const {
  protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Package::InitAsDefaultInstance() {
  ::hackchat::_Package_default_instance_.text_msg_ = const_cast< ::hackchat::TextMsg*>(
      ::hackchat::TextMsg::internal_default_instance());
  ::hackchat::_Package_default_instance_.status_msg_ = const_cast< ::hackchat::StatusMsg*>(
      ::hackchat::StatusMsg::internal_default_instance());
}
void Package::set_allocated_text_msg(::hackchat::TextMsg* text_msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (text_msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text_msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text_msg, submessage_arena);
    }
    set_has_text_msg();
    msg_.text_msg_ = text_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:hackchat.Package.text_msg)
}
void Package::set_allocated_status_msg(::hackchat::StatusMsg* status_msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (status_msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status_msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status_msg, submessage_arena);
    }
    set_has_status_msg();
    msg_.status_msg_ = status_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:hackchat.Package.status_msg)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Package::kSenderIdFieldNumber;
const int Package::kHostIdFieldNumber;
const int Package::kTextMsgFieldNumber;
const int Package::kStatusMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Package::Package()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hackmessage_2eproto::InitDefaultsPackage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hackchat.Package)
}
Package::Package(const Package& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(host_id_));
  clear_has_msg();
  switch (from.msg_case()) {
    case kTextMsg: {
      mutable_text_msg()->::hackchat::TextMsg::MergeFrom(from.text_msg());
      break;
    }
    case kStatusMsg: {
      mutable_status_msg()->::hackchat::StatusMsg::MergeFrom(from.status_msg());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:hackchat.Package)
}

void Package::SharedCtor() {
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(host_id_));
  clear_has_msg();
  _cached_size_ = 0;
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:hackchat.Package)
  SharedDtor();
}

void Package::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void Package::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Package::descriptor() {
  ::protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Package& Package::default_instance() {
  ::protobuf_hackmessage_2eproto::InitDefaultsPackage();
  return *internal_default_instance();
}

Package* Package::New(::google::protobuf::Arena* arena) const {
  Package* n = new Package;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Package::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:hackchat.Package)
  switch (msg_case()) {
    case kTextMsg: {
      delete msg_.text_msg_;
      break;
    }
    case kStatusMsg: {
      delete msg_.status_msg_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:hackchat.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(host_id_));
  clear_msg();
  _internal_metadata_.Clear();
}

bool Package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hackchat.Package)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sender_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 host_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .hackchat.TextMsg text_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_text_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .hackchat.StatusMsg status_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hackchat.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hackchat.Package)
  return false;
#undef DO_
}

void Package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hackchat.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_id(), output);
  }

  // int32 host_id = 2;
  if (this->host_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->host_id(), output);
  }

  // .hackchat.TextMsg text_msg = 3;
  if (has_text_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.text_msg_, output);
  }

  // .hackchat.StatusMsg status_msg = 4;
  if (has_status_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_.status_msg_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hackchat.Package)
}

::google::protobuf::uint8* Package::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hackchat.Package)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_id(), target);
  }

  // int32 host_id = 2;
  if (this->host_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->host_id(), target);
  }

  // .hackchat.TextMsg text_msg = 3;
  if (has_text_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *msg_.text_msg_, deterministic, target);
  }

  // .hackchat.StatusMsg status_msg = 4;
  if (has_status_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *msg_.status_msg_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hackchat.Package)
  return target;
}

size_t Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hackchat.Package)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sender_id = 1;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_id());
  }

  // int32 host_id = 2;
  if (this->host_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->host_id());
  }

  switch (msg_case()) {
    // .hackchat.TextMsg text_msg = 3;
    case kTextMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.text_msg_);
      break;
    }
    // .hackchat.StatusMsg status_msg = 4;
    case kStatusMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.status_msg_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Package::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hackchat.Package)
  GOOGLE_DCHECK_NE(&from, this);
  const Package* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Package>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hackchat.Package)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hackchat.Package)
    MergeFrom(*source);
  }
}

void Package::MergeFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hackchat.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender_id() != 0) {
    set_sender_id(from.sender_id());
  }
  if (from.host_id() != 0) {
    set_host_id(from.host_id());
  }
  switch (from.msg_case()) {
    case kTextMsg: {
      mutable_text_msg()->::hackchat::TextMsg::MergeFrom(from.text_msg());
      break;
    }
    case kStatusMsg: {
      mutable_status_msg()->::hackchat::StatusMsg::MergeFrom(from.status_msg());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void Package::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hackchat.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hackchat.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  return true;
}

void Package::Swap(Package* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Package::InternalSwap(Package* other) {
  using std::swap;
  swap(sender_id_, other->sender_id_);
  swap(host_id_, other->host_id_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Package::GetMetadata() const {
  protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PackageList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackageList::kPackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackageList::PackageList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hackmessage_2eproto::InitDefaultsPackageList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hackchat.PackageList)
}
PackageList::PackageList(const PackageList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pack_(from.pack_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hackchat.PackageList)
}

void PackageList::SharedCtor() {
  _cached_size_ = 0;
}

PackageList::~PackageList() {
  // @@protoc_insertion_point(destructor:hackchat.PackageList)
  SharedDtor();
}

void PackageList::SharedDtor() {
}

void PackageList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageList::descriptor() {
  ::protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackageList& PackageList::default_instance() {
  ::protobuf_hackmessage_2eproto::InitDefaultsPackageList();
  return *internal_default_instance();
}

PackageList* PackageList::New(::google::protobuf::Arena* arena) const {
  PackageList* n = new PackageList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackageList::Clear() {
// @@protoc_insertion_point(message_clear_start:hackchat.PackageList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pack_.Clear();
  _internal_metadata_.Clear();
}

bool PackageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hackchat.PackageList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hackchat.Package pack = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_pack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hackchat.PackageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hackchat.PackageList)
  return false;
#undef DO_
}

void PackageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hackchat.PackageList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hackchat.Package pack = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pack_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pack(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hackchat.PackageList)
}

::google::protobuf::uint8* PackageList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hackchat.PackageList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hackchat.Package pack = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pack_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pack(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hackchat.PackageList)
  return target;
}

size_t PackageList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hackchat.PackageList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .hackchat.Package pack = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pack_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pack(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hackchat.PackageList)
  GOOGLE_DCHECK_NE(&from, this);
  const PackageList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackageList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hackchat.PackageList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hackchat.PackageList)
    MergeFrom(*source);
  }
}

void PackageList::MergeFrom(const PackageList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hackchat.PackageList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pack_.MergeFrom(from.pack_);
}

void PackageList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hackchat.PackageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageList::CopyFrom(const PackageList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hackchat.PackageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageList::IsInitialized() const {
  return true;
}

void PackageList::Swap(PackageList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackageList::InternalSwap(PackageList* other) {
  using std::swap;
  pack_.InternalSwap(&other->pack_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackageList::GetMetadata() const {
  protobuf_hackmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hackmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hackchat

// @@protoc_insertion_point(global_scope)
