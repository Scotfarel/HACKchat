// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hackmessage.proto

#ifndef PROTOBUF_hackmessage_2eproto__INCLUDED
#define PROTOBUF_hackmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_hackmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTextMsgImpl();
void InitDefaultsTextMsg();
void InitDefaultsStatusMsgImpl();
void InitDefaultsStatusMsg();
void InitDefaultsPackageImpl();
void InitDefaultsPackage();
inline void InitDefaults() {
  InitDefaultsTextMsg();
  InitDefaultsStatusMsg();
  InitDefaultsPackage();
}
}  // namespace protobuf_hackmessage_2eproto
namespace hackchat {
class Package;
class PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class StatusMsg;
class StatusMsgDefaultTypeInternal;
extern StatusMsgDefaultTypeInternal _StatusMsg_default_instance_;
class TextMsg;
class TextMsgDefaultTypeInternal;
extern TextMsgDefaultTypeInternal _TextMsg_default_instance_;
}  // namespace hackchat
namespace hackchat {

// ===================================================================

class TextMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hackchat.TextMsg) */ {
 public:
  TextMsg();
  virtual ~TextMsg();

  TextMsg(const TextMsg& from);

  inline TextMsg& operator=(const TextMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextMsg(TextMsg&& from) noexcept
    : TextMsg() {
    *this = ::std::move(from);
  }

  inline TextMsg& operator=(TextMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextMsg* internal_default_instance() {
    return reinterpret_cast<const TextMsg*>(
               &_TextMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TextMsg* other);
  friend void swap(TextMsg& a, TextMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  TextMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TextMsg& from);
  void MergeFrom(const TextMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TextMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_text = 3;
  void clear_msg_text();
  static const int kMsgTextFieldNumber = 3;
  const ::std::string& msg_text() const;
  void set_msg_text(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_text(::std::string&& value);
  #endif
  void set_msg_text(const char* value);
  void set_msg_text(const char* value, size_t size);
  ::std::string* mutable_msg_text();
  ::std::string* release_msg_text();
  void set_allocated_msg_text(::std::string* msg_text);

  // bool is_feature = 4;
  void clear_is_feature();
  static const int kIsFeatureFieldNumber = 4;
  bool is_feature() const;
  void set_is_feature(bool value);

  // @@protoc_insertion_point(class_scope:hackchat.TextMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_text_;
  bool is_feature_;
  mutable int _cached_size_;
  friend struct ::protobuf_hackmessage_2eproto::TableStruct;
  friend void ::protobuf_hackmessage_2eproto::InitDefaultsTextMsgImpl();
};
// -------------------------------------------------------------------

class StatusMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hackchat.StatusMsg) */ {
 public:
  StatusMsg();
  virtual ~StatusMsg();

  StatusMsg(const StatusMsg& from);

  inline StatusMsg& operator=(const StatusMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusMsg(StatusMsg&& from) noexcept
    : StatusMsg() {
    *this = ::std::move(from);
  }

  inline StatusMsg& operator=(StatusMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusMsg* internal_default_instance() {
    return reinterpret_cast<const StatusMsg*>(
               &_StatusMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StatusMsg* other);
  friend void swap(StatusMsg& a, StatusMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusMsg& from);
  void MergeFrom(const StatusMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool connected = 3;
  void clear_connected();
  static const int kConnectedFieldNumber = 3;
  bool connected() const;
  void set_connected(bool value);

  // int32 connected_id = 4;
  void clear_connected_id();
  static const int kConnectedIdFieldNumber = 4;
  ::google::protobuf::int32 connected_id() const;
  void set_connected_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hackchat.StatusMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool connected_;
  ::google::protobuf::int32 connected_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_hackmessage_2eproto::TableStruct;
  friend void ::protobuf_hackmessage_2eproto::InitDefaultsStatusMsgImpl();
};
// -------------------------------------------------------------------

class Package : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hackchat.Package) */ {
 public:
  Package();
  virtual ~Package();

  Package(const Package& from);

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(Package&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Package& default_instance();

  enum MsgCase {
    kText = 3,
    kStatus = 4,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Package* other);
  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Package* New() const PROTOBUF_FINAL { return New(NULL); }

  Package* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Package* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sender_id = 1;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 1;
  ::google::protobuf::int32 sender_id() const;
  void set_sender_id(::google::protobuf::int32 value);

  // int32 host_id = 2;
  void clear_host_id();
  static const int kHostIdFieldNumber = 2;
  ::google::protobuf::int32 host_id() const;
  void set_host_id(::google::protobuf::int32 value);

  // .hackchat.TextMsg text = 3;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::hackchat::TextMsg& text() const;
  ::hackchat::TextMsg* release_text();
  ::hackchat::TextMsg* mutable_text();
  void set_allocated_text(::hackchat::TextMsg* text);

  // .hackchat.StatusMsg status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  const ::hackchat::StatusMsg& status() const;
  ::hackchat::StatusMsg* release_status();
  ::hackchat::StatusMsg* mutable_status();
  void set_allocated_status(::hackchat::StatusMsg* status);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:hackchat.Package)
 private:
  void set_has_text();
  void set_has_status();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sender_id_;
  ::google::protobuf::int32 host_id_;
  union MsgUnion {
    MsgUnion() {}
    ::hackchat::TextMsg* text_;
    ::hackchat::StatusMsg* status_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_hackmessage_2eproto::TableStruct;
  friend void ::protobuf_hackmessage_2eproto::InitDefaultsPackageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextMsg

// string msg_text = 3;
inline void TextMsg::clear_msg_text() {
  msg_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TextMsg::msg_text() const {
  // @@protoc_insertion_point(field_get:hackchat.TextMsg.msg_text)
  return msg_text_.GetNoArena();
}
inline void TextMsg::set_msg_text(const ::std::string& value) {
  
  msg_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hackchat.TextMsg.msg_text)
}
#if LANG_CXX11
inline void TextMsg::set_msg_text(::std::string&& value) {
  
  msg_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hackchat.TextMsg.msg_text)
}
#endif
inline void TextMsg::set_msg_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hackchat.TextMsg.msg_text)
}
inline void TextMsg::set_msg_text(const char* value, size_t size) {
  
  msg_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hackchat.TextMsg.msg_text)
}
inline ::std::string* TextMsg::mutable_msg_text() {
  
  // @@protoc_insertion_point(field_mutable:hackchat.TextMsg.msg_text)
  return msg_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextMsg::release_msg_text() {
  // @@protoc_insertion_point(field_release:hackchat.TextMsg.msg_text)
  
  return msg_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextMsg::set_allocated_msg_text(::std::string* msg_text) {
  if (msg_text != NULL) {
    
  } else {
    
  }
  msg_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_text);
  // @@protoc_insertion_point(field_set_allocated:hackchat.TextMsg.msg_text)
}

// bool is_feature = 4;
inline void TextMsg::clear_is_feature() {
  is_feature_ = false;
}
inline bool TextMsg::is_feature() const {
  // @@protoc_insertion_point(field_get:hackchat.TextMsg.is_feature)
  return is_feature_;
}
inline void TextMsg::set_is_feature(bool value) {
  
  is_feature_ = value;
  // @@protoc_insertion_point(field_set:hackchat.TextMsg.is_feature)
}

// -------------------------------------------------------------------

// StatusMsg

// bool connected = 3;
inline void StatusMsg::clear_connected() {
  connected_ = false;
}
inline bool StatusMsg::connected() const {
  // @@protoc_insertion_point(field_get:hackchat.StatusMsg.connected)
  return connected_;
}
inline void StatusMsg::set_connected(bool value) {
  
  connected_ = value;
  // @@protoc_insertion_point(field_set:hackchat.StatusMsg.connected)
}

// int32 connected_id = 4;
inline void StatusMsg::clear_connected_id() {
  connected_id_ = 0;
}
inline ::google::protobuf::int32 StatusMsg::connected_id() const {
  // @@protoc_insertion_point(field_get:hackchat.StatusMsg.connected_id)
  return connected_id_;
}
inline void StatusMsg::set_connected_id(::google::protobuf::int32 value) {
  
  connected_id_ = value;
  // @@protoc_insertion_point(field_set:hackchat.StatusMsg.connected_id)
}

// -------------------------------------------------------------------

// Package

// int32 sender_id = 1;
inline void Package::clear_sender_id() {
  sender_id_ = 0;
}
inline ::google::protobuf::int32 Package::sender_id() const {
  // @@protoc_insertion_point(field_get:hackchat.Package.sender_id)
  return sender_id_;
}
inline void Package::set_sender_id(::google::protobuf::int32 value) {
  
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:hackchat.Package.sender_id)
}

// int32 host_id = 2;
inline void Package::clear_host_id() {
  host_id_ = 0;
}
inline ::google::protobuf::int32 Package::host_id() const {
  // @@protoc_insertion_point(field_get:hackchat.Package.host_id)
  return host_id_;
}
inline void Package::set_host_id(::google::protobuf::int32 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:hackchat.Package.host_id)
}

// .hackchat.TextMsg text = 3;
inline bool Package::has_text() const {
  return msg_case() == kText;
}
inline void Package::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void Package::clear_text() {
  if (has_text()) {
    delete msg_.text_;
    clear_has_msg();
  }
}
inline ::hackchat::TextMsg* Package::release_text() {
  // @@protoc_insertion_point(field_release:hackchat.Package.text)
  if (has_text()) {
    clear_has_msg();
      ::hackchat::TextMsg* temp = msg_.text_;
    msg_.text_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::hackchat::TextMsg& Package::text() const {
  // @@protoc_insertion_point(field_get:hackchat.Package.text)
  return has_text()
      ? *msg_.text_
      : *reinterpret_cast< ::hackchat::TextMsg*>(&::hackchat::_TextMsg_default_instance_);
}
inline ::hackchat::TextMsg* Package::mutable_text() {
  if (!has_text()) {
    clear_msg();
    set_has_text();
    msg_.text_ = new ::hackchat::TextMsg;
  }
  // @@protoc_insertion_point(field_mutable:hackchat.Package.text)
  return msg_.text_;
}

// .hackchat.StatusMsg status = 4;
inline bool Package::has_status() const {
  return msg_case() == kStatus;
}
inline void Package::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline void Package::clear_status() {
  if (has_status()) {
    delete msg_.status_;
    clear_has_msg();
  }
}
inline ::hackchat::StatusMsg* Package::release_status() {
  // @@protoc_insertion_point(field_release:hackchat.Package.status)
  if (has_status()) {
    clear_has_msg();
      ::hackchat::StatusMsg* temp = msg_.status_;
    msg_.status_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::hackchat::StatusMsg& Package::status() const {
  // @@protoc_insertion_point(field_get:hackchat.Package.status)
  return has_status()
      ? *msg_.status_
      : *reinterpret_cast< ::hackchat::StatusMsg*>(&::hackchat::_StatusMsg_default_instance_);
}
inline ::hackchat::StatusMsg* Package::mutable_status() {
  if (!has_status()) {
    clear_msg();
    set_has_status();
    msg_.status_ = new ::hackchat::StatusMsg;
  }
  // @@protoc_insertion_point(field_mutable:hackchat.Package.status)
  return msg_.status_;
}

inline bool Package::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Package::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Package::MsgCase Package::msg_case() const {
  return Package::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hackchat

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hackmessage_2eproto__INCLUDED
