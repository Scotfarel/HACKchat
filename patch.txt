diff --git a/clienthack/client.cpp b/clienthack/client.cpp
index 390cf4f..3a64887 100644
--- a/clienthack/client.cpp
+++ b/clienthack/client.cpp
@@ -263,12 +263,17 @@ void Client::disconnect() {
     ui->msg_label->setText("Server shut down :(");
 }
 
+void Client::ready() {
+    qDebug() << "here i am";
+}
+
 bool Client::first_connect() {
-    tcpSock = new QTcpSocket(this);
-    tcpSock->connectToHost(QHostAddress(ui->address_line->text()), ui->port_line->text().toInt());
+    tcpSock = new QSslSocket(this);
+    connect(tcpSock, SIGNAL(encrypted()), this, SLOT(ready()));
+    tcpSock->connectToHostEncrypted(ui->address_line->text(), ui->port_line->text().toInt());
     connect(tcpSock, SIGNAL(readyRead()), this, SLOT(leer()));
     connect(tcpSock, SIGNAL(disconnected()), this, SLOT(disconnect()));
-    if (!tcpSock->waitForConnected()) {
+    if (!tcpSock->waitForEncrypted()) {
         ui->msg_label->setText("Server problems!");
         delete tcpSock;
         return false;
diff --git a/clienthack/client.h b/clienthack/client.h
index b9250cb..81eb243 100644
--- a/clienthack/client.h
+++ b/clienthack/client.h
@@ -5,7 +5,7 @@
 #include <google/protobuf/message.h>
 #include <google/protobuf/util/time_util.h>
 #include <QMainWindow>
-#include <QTcpSocket>
+#include <QSslSocket>
 #include <QHostAddress>
 #include <QCryptographicHash>
 #include <QListWidgetItem>
@@ -34,10 +34,11 @@ public:
 public slots:
     void leer();
     void disconnect();
+    void ready();
 
 private:
     Ui::Client *ui;
-    QTcpSocket *tcpSock;
+    QSslSocket *tcpSock;
     QMap<int, QString> users_online;
     QString nickname;
     bool connected = false;
diff --git a/hackserver/hackdb.db3 b/hackserver/hackdb.db3
index 0d92410..3ce3a58 100644
Binary files a/hackserver/hackdb.db3 and b/hackserver/hackdb.db3 differ
diff --git a/hackserver/hackserver.cpp b/hackserver/hackserver.cpp
index f90bbf7..97a7ae1 100644
--- a/hackserver/hackserver.cpp
+++ b/hackserver/hackserver.cpp
@@ -7,10 +7,10 @@ hackserver::hackserver(QWidget *parent) :
 {
     ui->setupUi(this);
 
-    tcpServ = new QTcpServer(this);
+    tcpServ = new SslServer(this);
 
     tcpServ->listen(QHostAddress::LocalHost, 8888);
-    connect(tcpServ, SIGNAL(newConnection()), this, SLOT(connect_new()));
+    connect(tcpServ, SIGNAL(newEncryptedConnection()), this, SLOT(connect_new()));
 
     db = QSqlDatabase::addDatabase("QSQLITE");
     db.setDatabaseName("/home/kaito/hackchat/hackserver/hackdb.db3");
@@ -29,7 +29,7 @@ hackserver::~hackserver() {
 }
 
 void hackserver::connect_new() {
-    QTcpSocket* sock = tcpServ->nextPendingConnection();
+    QSslSocket* sock = tcpServ->nextPendingConnection();
     connect(sock, SIGNAL(readyRead()), this, SLOT(read()));
     connect(sock, SIGNAL(disconnected()), this, SLOT(disconnect()));
 }
@@ -55,7 +55,7 @@ void hackserver::send_everyone_disconnected(int id) {
     PackageList list;
     Package* msg = list.add_pack();
     prepare_status_msg(msg, StatusMsg::DISCONNECTED, id);
-    for (std::pair<int const, QTcpSocket*>& c : clients_map) {
+    for (std::pair<int const, QSslSocket*>& c : clients_map) {
         msg->set_host_id(c.first);
         QByteArray f_message(list.SerializeAsString().c_str(), list.ByteSize());
         c.second->write(f_message, f_message.size());
@@ -63,7 +63,7 @@ void hackserver::send_everyone_disconnected(int id) {
 }
 
 void hackserver::read() {
-    QTcpSocket* client = (QTcpSocket*)sender();
+    QSslSocket* client = (QSslSocket*)sender();
     QByteArray buffer;
     buffer.resize(client->bytesAvailable());
     client->read(buffer.data(), buffer.size());
@@ -144,7 +144,7 @@ void hackserver::read() {
     }
 }
 
-void hackserver::register_user(const Package& msg, QTcpSocket* user) {
+void hackserver::register_user(const Package& msg, QSslSocket* user) {
     QString login = QString::fromStdString(msg.status_msg().user_login());
     QByteArray password(msg.status_msg().user_pass().c_str(), msg.status_msg().user_pass().length());
 
@@ -168,7 +168,7 @@ void hackserver::register_user(const Package& msg, QTcpSocket* user) {
     return;
 }
 
-bool hackserver::auth(const Package& msg, QTcpSocket* user) {
+bool hackserver::auth(const Package& msg, QSslSocket* user) {
     QString login = QString::fromStdString(msg.status_msg().user_login());
     QByteArray password(msg.status_msg().user_pass().c_str(), msg.status_msg().user_pass().length());
 
@@ -210,7 +210,7 @@ bool hackserver::auth(const Package& msg, QTcpSocket* user) {
 }
 
 void hackserver::disconnect() {
-    QTcpSocket* disconnected_client = static_cast<QTcpSocket*>(sender());
+    QSslSocket* disconnected_client = static_cast<QSslSocket*>(sender());
     int num = -1;
     for (auto it = clients_map.begin(); it != clients_map.end(); ++it) {
       if (it->second == disconnected_client) {
diff --git a/hackserver/hackserver.h b/hackserver/hackserver.h
index dc0b50d..36baa8e 100644
--- a/hackserver/hackserver.h
+++ b/hackserver/hackserver.h
@@ -19,6 +19,7 @@
 #include "messagehandler.h"
 #include "messagebuilder.h"
 #include "objectdao.h"
+#include "sslserver.h"
 
 using hackchat::Package;
 using hackchat::TextMsg;
@@ -46,14 +47,14 @@ public slots:
 
 private:
     Ui::hackserver* ui;
-    QTcpServer* tcpServ;
+    SslServer* tcpServ;
     QSqlDatabase db;
     int client_number = 1;
-    std::map<int, QTcpSocket*> clients_map;
+    std::map<int, QSslSocket*> clients_map;
     void send_everyone_new(int id, std::string login);
     void send_everyone_disconnected(int id);
-    bool auth(const Package& msg, QTcpSocket* user);
-    void register_user(const Package& msg, QTcpSocket* user);
+    bool auth(const Package& msg, QSslSocket* user);
+    void register_user(const Package& msg, QSslSocket* user);
     void prepare_status_msg(Package* package, StatusMsg::Status status, int user_id = 0, std::string user_login = "");
 };
 
diff --git a/hackserver/hackserver.pro b/hackserver/hackserver.pro
index aca9e83..07e7687 100644
--- a/hackserver/hackserver.pro
+++ b/hackserver/hackserver.pro
@@ -16,7 +16,8 @@ CONFIG += c++11
 
 SOURCES += main.cpp \
         hackserver.cpp \
-        ../proto/hackmessage.pb.cc
+        ../proto/hackmessage.pb.cc \
+    sslserver.cpp
 
 HEADERS  += hackserver.h \
           ../proto/hackmessage.pb.h \
@@ -24,6 +25,7 @@ HEADERS  += hackserver.h \
     userhandler.h \
     userbuilder.h \
     messagebuilder.h \
-    messagehandler.h
+    messagehandler.h \
+    sslserver.h
 
 FORMS    += hackserver.ui
diff --git a/hackserver/sslserver.cpp b/hackserver/sslserver.cpp
index e035610..d1c7369 100644
--- a/hackserver/sslserver.cpp
+++ b/hackserver/sslserver.cpp
@@ -1,6 +1,24 @@
 #include "sslserver.h"
 
-SslServer::SslServer()
-{
+SslServer::SslServer(QObject *parent) :
+    QTcpServer(parent) {
+}
+
+SslServer::~SslServer() {
+}
+
+QSslSocket* SslServer::nextPendingConnection() {
+    return static_cast<QSslSocket*>(QTcpServer::nextPendingConnection());
+}
 
+void SslServer::incomingConnection(qintptr socket) {
+    QSslSocket* sslSocket = new QSslSocket();
+    if (sslSocket->setSocketDescriptor(socket)) {
+        addPendingConnection(sslSocket);
+        connect(sslSocket, &QSslSocket::encrypted, this, &SslServer::newEncryptedConnection);
+        addPendingConnection(sslSocket);
+        sslSocket->startServerEncryption();
+    } else {
+        delete sslSocket;
+    }
 }
diff --git a/hackserver/sslserver.h b/hackserver/sslserver.h
index 963e794..53acfbd 100644
--- a/hackserver/sslserver.h
+++ b/hackserver/sslserver.h
@@ -1,11 +1,22 @@
 #ifndef SSLSERVER_H
 #define SSLSERVER_H
 
+#include <QTcpServer>
+#include <QSslSocket>
 
-class SslServer
+class SslServer : public QTcpServer
 {
+    Q_OBJECT
 public:
-    SslServer();
+    SslServer(QObject *parent = Q_NULLPTR);
+    ~SslServer();
+    QSslSocket* nextPendingConnection();
+
+Q_SIGNALS:
+    void newEncryptedConnection();
+
+protected:
+    virtual void incomingConnection(qintptr socket);
 };
 
-#endif // SSLSERVER_H
\ No newline at end of file
+#endif // SSLSERVER_H
